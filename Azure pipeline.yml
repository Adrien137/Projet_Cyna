trigger:
  branches:
    include:
      - main

variables:
  azureSubscription: 'Azure-RG-CYNA-PROD'
  resourceGroup: 'RG-CYNA-PROD'
  clusterName: 'ClusterWEB'
  acrName: 'cynaacr'
  location: 'westeurope'
  namespace: 'web'
  imageName: 'nginx-web'
  containerRegistry: 'cynaacr.azurecr.io'
  storageAccount: 'cynastorage'
  containerName: 'backupdata'

stages:
  - stage: BuildAndScan
    displayName: 'Build, Lint and Scan'
    jobs:
      - job: DockerBuild
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # =======================================================
          # SONARQUBE SCAN COMPLET
          # =======================================================
          - task: SonarQubePrepare@5
            displayName: 'Prepare SonarQube Analysis'
            inputs:
              SonarQube: 'SonarQubeServiceConnection'
              scannerMode: 'CLI'
              configMode: 'manual'
              cliProjectKey: 'ClusterWEB'
              cliProjectName: 'ClusterWEB'
              cliProjectVersion: '$(Build.BuildNumber)'
              extraProperties: |
                # Configuration du projet
                sonar.projectKey=ClusterWEB
                sonar.projectName=ClusterWEB
                sonar.projectVersion=$(Build.BuildNumber)
                sonar.sources=.
                sonar.sourceEncoding=UTF-8
                
                # Exclusions (fichiers à ne pas analyser)
                sonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/*.min.js,**/*.min.css,**/vendor/**,**/logs/**,**/*.log,**/.git/**
                
                # Couverture de code (si applicable)
                sonar.javascript.lcov.reportPaths=coverage/lcov.info
                sonar.coverage.exclusions=**/*.test.js,**/*.spec.js,**/test/**,**/tests/**
                
                # Configuration Docker/Kubernetes
                sonar.docker.file=Dockerfile
                sonar.kubernetes.file=manifest/*.yaml,*.yaml
                
                # Seuils de qualité
                sonar.qualitygate.wait=true
                sonar.qualitygate.timeout=300

          # Installation des outils d'analyse (si nécessaire)
          - script: |
              echo "=== Installation des outils d'analyse ==="
              
              # Installation de Node.js si nécessaire pour l'analyse JS
              if [ -f "package.json" ]; then
                echo "Package.json détecté, installation des dépendances Node.js"
                npm install
                
                # Exécution des tests avec couverture (si configuré)
                if npm run test:coverage 2>/dev/null; then
                  echo "Tests avec couverture exécutés"
                else
                  echo "Pas de script test:coverage disponible"
                fi
              fi
              
              # Installation d'outils additionnels pour l'analyse
              sudo apt-get update
              sudo apt-get install -y shellcheck yamllint
              
              echo "=== Vérification de la structure du projet ==="
              find . -name "*.js" -o -name "*.ts" -o -name "*.py" -o -name "*.java" -o -name "*.cs" -o -name "*.yaml" -o -name "*.yml" | head -20
            displayName: 'Install Analysis Tools'
            continueOnError: true

          # Analyse statique additionnelle avant SonarQube
          - script: |
              echo "=== Analyse statique préliminaire ==="
              
              # Analyse des fichiers YAML/YML
              echo "--- Validation YAML ---"
              find . -name "*.yaml" -o -name "*.yml" | while read file; do
                echo "Validation de: $file"
                yamllint "$file" || echo "Erreur dans $file"
              done
              
              # Analyse des scripts shell
              echo "--- Validation Shell Scripts ---"
              find . -name "*.sh" | while read file; do
                echo "Validation de: $file"
                shellcheck "$file" || echo "Erreur dans $file"
              done
              
              # Analyse du Dockerfile
              if [ -f "Dockerfile" ]; then
                echo "--- Validation Dockerfile ---"
                # Installation de hadolint pour Dockerfile
                wget -O hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
                chmod +x hadolint
                sudo mv hadolint /usr/local/bin/
                
                hadolint Dockerfile || echo "Erreurs détectées dans le Dockerfile"
              fi
            displayName: 'Static Analysis Pre-checks'
            continueOnError: true

          # Exécution de l'analyse SonarQube
          - task: SonarQubeAnalyze@5
            displayName: 'Run SonarQube Analysis'
            inputs:
              jdkversion: 'JAVA_HOME_17_X64'

          # Publication des résultats SonarQube
          - task: SonarQubePublish@5
            displayName: 'Publish SonarQube Results'
            inputs:
              pollingTimeoutSec: '300'

          # Vérification de la Quality Gate
          - script: |
              echo "=== Vérification des résultats SonarQube ==="
              
              # Récupération du statut de la Quality Gate via API (optionnel)
              # Nécessite la configuration des variables SONAR_HOST_URL et SONAR_TOKEN
              if [ ! -z "$SONAR_HOST_URL" ] && [ ! -z "$SONAR_TOKEN" ]; then
                echo "Vérification du statut via API SonarQube..."
                
                # Attente de la fin de l'analyse
                sleep 30
                
                # Récupération du statut
                PROJECT_KEY="ClusterWEB"
                STATUS_URL="$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=$PROJECT_KEY"
                
                curl -u "$SONAR_TOKEN:" "$STATUS_URL" > sonar_status.json
                cat sonar_status.json
                
                # Vérification du statut
                GATE_STATUS=$(cat sonar_status.json | jq -r '.projectStatus.status')
                echo "Quality Gate Status: $GATE_STATUS"
                
                if [ "$GATE_STATUS" != "OK" ]; then
                  echo "##[error]Quality Gate Failed!"
                  echo "##[error]Vérifiez les résultats sur SonarQube: $SONAR_HOST_URL/dashboard?id=$PROJECT_KEY"
                  # Décommentez la ligne suivante pour faire échouer le build si Quality Gate échoue
                  # exit 1
                else
                  echo "##[section]Quality Gate Passed!"
                fi
              else
                echo "Variables SONAR_HOST_URL et SONAR_TOKEN non configurées"
                echo "Statut de la Quality Gate disponible dans les logs SonarQube ci-dessus"
              fi
            displayName: 'Check Quality Gate Status'
            continueOnError: true
            env:
              SONAR_HOST_URL: $(SONAR_HOST_URL)
              SONAR_TOKEN: $(SONAR_TOKEN)

          # =======================================================
          # BUILD ET SCAN DOCKER
          # =======================================================
          - script: |
              docker build -t $(containerRegistry)/$(imageName):$(Build.BuildId) .
              docker tag $(containerRegistry)/$(imageName):$(Build.BuildId) $(containerRegistry)/$(imageName):latest
            displayName: 'Build Docker Image'

          - script: |
              # Installing Trivy...
              sudo apt-get update
              sudo apt-get install wget apt-transport-https gnupg lsb-release -y
              wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
              echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
              sudo apt-get update
              sudo apt-get install trivy -y
            displayName: 'Install Trivy'

          - script: |
              echo "=== Scan de sécurité Docker avec Trivy ==="
              
              # Scan avec sortie JSON pour analyse
              trivy image --format json --output trivy-results.json $(containerRegistry)/$(imageName):$(Build.BuildId)
              
              # Scan avec sortie table pour lisibilité
              trivy image --format table $(containerRegistry)/$(imageName):$(Build.BuildId)
              
              # Scan avec critères de sortie (ne fait pas échouer le build mais log les erreurs)
              trivy image --exit-code 0 --severity HIGH,CRITICAL $(containerRegistry)/$(imageName):$(Build.BuildId)
              
              # Analyse des résultats
              if [ -f "trivy-results.json" ]; then
                echo "=== Résumé des vulnérabilités ==="
                HIGH_COUNT=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length')
                CRITICAL_COUNT=$(cat trivy-results.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length')
                
                echo "Vulnérabilités CRITICAL: $CRITICAL_COUNT"
                echo "Vulnérabilités HIGH: $HIGH_COUNT"
                
                if [ "$CRITICAL_COUNT" -gt 0 ]; then
                  echo "##[warning]$CRITICAL_COUNT vulnérabilités CRITICAL détectées"
                fi
              fi
            displayName: 'Scan Docker Image with Trivy'
          
          - task: AzureCLI@2
            displayName: 'Login to ACR'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Logging in to ACR...
                az acr login --name $(acrName)

          - script: |
              docker push $(containerRegistry)/$(imageName):$(Build.BuildId)
              docker push $(containerRegistry)/$(imageName):latest
            displayName: 'Push Docker Image to ACR'

          # Publication des résultats des scans
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Security Scan Results'
            inputs:
              pathToPublish: '.'
              artifactName: 'security-reports'
              publishLocation: 'Container'
            condition: always()

  # =======================================================
  # STAGE DÉDIÉE À L'ANALYSE DE QUALITÉ (OPTIONNEL)
  # =======================================================
  - stage: QualityGate
    displayName: 'Quality Gate Validation'
    dependsOn: BuildAndScan
    condition: succeeded()
    jobs:
      - job: ValidateQuality
        displayName: 'Validate Code Quality'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - script: |
              echo "=== Validation finale de la qualité ==="
              echo "Build ID: $(Build.BuildId)"
              echo "Source Branch: $(Build.SourceBranch)"
              echo "Commit: $(Build.SourceVersion)"
              
              echo "=== Métriques du build ==="
              echo "Timestamp: $(date)"
              echo "Agent: $(Agent.Name)"
              
              # Exemple de validation personnalisée
              if [ "$(Build.Reason)" = "PullRequest" ]; then
                echo "Build déclenché par Pull Request - validation renforcée"
                # Ajouter ici des validations spécifiques aux PR
              fi
              
              echo "##[section]Quality Gate Validation Completed"
            displayName: 'Final Quality Validation'

  # =======================================================
Deploy AKS Infrastructure
  # =======================================================
  # Configuration AKS pour un cluster web de production

- task: AzureCLI@2
  displayName: 'Deploy Enhanced AKS Infrastructure'
  inputs:
    azureSubscription: '$(azureSubscription)'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      set -e
      
      echo "=== Création du Resource Group ==="
      az group create --name $(resourceGroup) --location $(location)
      
      echo "=== Configuration réseau avancée ==="
      # VNET avec architecture multi-tiers
      az network vnet create \
        --resource-group $(resourceGroup) \
        --name VNET-CYNA \
        --address-prefix 10.0.0.0/16 \
        --subnet-name aks-subnet \
        --subnet-prefix 10.0.1.0/24
      
      # Subnet additionnel pour les services externes
      az network vnet subnet create \
        --resource-group $(resourceGroup) \
        --vnet-name VNET-CYNA \
        --name ingress-subnet \
        --address-prefix 10.0.2.0/24
      
      # Subnet pour Azure Application Gateway (si nécessaire)
      az network vnet subnet create \
        --resource-group $(resourceGroup) \
        --vnet-name VNET-CYNA \
        --name appgw-subnet \
        --address-prefix 10.0.3.0/24
      
      # Network Security Groups
      az network nsg create \
        --resource-group $(resourceGroup) \
        --name aks-nsg
      
      # Règles NSG de base
      az network nsg rule create \
        --resource-group $(resourceGroup) \
        --nsg-name aks-nsg \
        --name AllowHTTP \
        --priority 1000 \
        --source-address-prefixes '*' \
        --destination-port-ranges 80 \
        --access Allow \
        --protocol Tcp
      
      az network nsg rule create \
        --resource-group $(resourceGroup) \
        --nsg-name aks-nsg \
        --name AllowHTTPS \
        --priority 1001 \
        --source-address-prefixes '*' \
        --destination-port-ranges 443 \
        --access Allow \
        --protocol Tcp
      
      # Association NSG au subnet
      az network vnet subnet update \
        --resource-group $(resourceGroup) \
        --vnet-name VNET-CYNA \
        --name aks-subnet \
        --network-security-group aks-nsg
      
      echo "=== Création du cluster AKS avec bonnes pratiques ==="
      
      # Récupération de l'ID du subnet
      SUBNET_ID=$(az network vnet subnet show \
        --resource-group $(resourceGroup) \
        --vnet-name VNET-CYNA \
        --name aks-subnet \
        --query id -o tsv)
      
      # Création du cluster AKS avec configuration avancée
      az aks create \
        --resource-group $(resourceGroup) \
        --name $(clusterName) \
        --location $(location) \
        --node-count 3 \
        --min-count 2 \
        --max-count 10 \
        --enable-cluster-autoscaler \
        --node-vm-size Standard_D4s_v3 \
        --zones 1 2 3 \
        --vnet-subnet-id $SUBNET_ID \
        --network-plugin azure \
        --network-policy calico \
        --service-cidr 10.1.0.0/16 \
        --dns-service-ip 10.1.0.10 \
        --enable-aad \
        --enable-azure-rbac \
        --enable-managed-identity \
        --attach-acr $(acrName) \
        --enable-addons monitoring \
        --workspace-resource-id "/subscriptions/$(az account show --query id -o tsv)/resourceGroups/$(resourceGroup)/providers/Microsoft.OperationalInsights/workspaces/$(clusterName)-workspace" \
        --enable-secret-rotation \
        --rotation-poll-interval 2m \
        --kubernetes-version "1.28" \
        --tier standard \
        --enable-network-policy \
        --generate-ssh-keys || {
          echo "Création du cluster échouée, vérification si il existe déjà..."
          if az aks show --resource-group $(resourceGroup) --name $(clusterName) &>/dev/null; then
            echo "Cluster existant trouvé, mise à jour..."
            az aks update \
              --resource-group $(resourceGroup) \
              --name $(clusterName) \
              --attach-acr $(acrName) \
              --enable-cluster-autoscaler \
              --min-count 2 \
              --max-count 10
          else
            echo "Tentative de création sans Log Analytics workspace..."
            az aks create \
              --resource-group $(resourceGroup) \
              --name $(clusterName) \
              --location $(location) \
              --node-count 3 \
              --min-count 2 \
              --max-count 10 \
              --enable-cluster-autoscaler \
              --node-vm-size Standard_D4s_v3 \
              --zones 1 2 3 \
              --vnet-subnet-id $SUBNET_ID \
              --network-plugin azure \
              --network-policy calico \
              --service-cidr 10.1.0.0/16 \
              --dns-service-ip 10.1.0.10 \
              --enable-aad \
              --enable-azure-rbac \
              --enable-managed-identity \
              --attach-acr $(acrName) \
              --kubernetes-version "1.28" \
              --tier standard \
              --enable-network-policy \
              --generate-ssh-keys
          fi
        }
      
      echo "=== Configuration d'un node pool Windows (optionnel) ==="
      # Décommentez si vous avez besoin de workloads Windows
      # az aks nodepool add \
      #   --resource-group $(resourceGroup) \
      #   --cluster-name $(clusterName) \
      #   --name winnp \
      #   --node-count 1 \
      #   --os-type Windows \
      #   --node-vm-size Standard_D4s_v3
      
      echo "=== Configuration du stockage Azure ==="
      # Storage Account avec configuration sécurisée
      az storage account create \
        --name $(storageAccount) \
        --resource-group $(resourceGroup) \
        --location $(location) \
        --sku Standard_LRS \
        --kind StorageV2 \
        --access-tier Hot \
        --https-only true \
        --min-tls-version TLS1_2 \
        --allow-blob-public-access false
      
      # Container avec accès restreint
      az storage container create \
        --name $(containerName) \
        --account-name $(storageAccount) \
        --auth-mode login \
        --public-access off
      
      echo "=== Configuration des politiques de sécurité ==="
      # Installation d'Azure Policy pour AKS
      az aks enable-addons \
        --resource-group $(resourceGroup) \
        --name $(clusterName) \
        --addons azure-policy || echo "Azure Policy déjà activé ou non disponible"
      
      echo "=== Configuration du backup (Azure Backup pour AKS) ==="
      # Création d'un Recovery Services Vault pour les backups
      az backup vault create \
        --resource-group $(resourceGroup) \
        --name $(clusterName)-backup-vault \
        --location $(location) || echo "Vault de backup déjà existant"
      
      echo "=== Affichage des informations du cluster ==="
      az aks show \
        --resource-group $(resourceGroup) \
        --name $(clusterName) \
        --query "{name:name,location:location,kubernetesVersion:kubernetesVersion,nodeResourceGroup:nodeResourceGroup,dnsPrefix:dnsPrefix,fqdn:fqdn,agentPoolProfiles:agentPoolProfiles[0].{count:count,vmSize:vmSize,availabilityZones:availabilityZones}}" \
        --output table
      
      echo "=== Configuration terminée avec succès ==="
  - stage: DeployToAKS
    displayName: 'Deploy Nginx to AKS'
    dependsOn: DeployInfrastructure
    jobs:
      - deployment: DeployApp
        environment: 'prod'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: 'Checkout source code'
                
                - script: |
                    # Contenu du répertoire de travail :
                    ls -la $(Build.SourcesDirectory)
                    # Recherche du fichier namespace.yaml :
                    find $(Build.SourcesDirectory) -name "namespace.yaml"
                  displayName: 'Debug - List files'
                
                - task: Kubernetes@1
                  displayName: 'Create Namespace'
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscriptionEndpoint: '$(azureSubscription)'
                    azureResourceGroup: '$(resourceGroup)'
                    kubernetesCluster: '$(clusterName)'
                    namespace: 'default'
                    command: apply
                    useConfigurationFile: true
                    configuration: '$(Build.SourcesDirectory)/namespace.yaml'

                - task: AzureCLI@2
                  displayName: 'Install NGINX Ingress Controller'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az aks get-credentials --resource-group $(resourceGroup) --name $(clusterName) --overwrite-existing
                      
                      kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/cloud/deploy.yaml
                      
                      kubectl wait --namespace ingress-nginx \
                        --for=condition=ready pod \
                        --selector=app.kubernetes.io/component=controller \
                        --timeout=300s
                      
                      kubectl get pods -n ingress-nginx
                      kubectl get svc -n ingress-nginx

                - task: Kubernetes@1
                  displayName: 'Deploy Applications'
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscriptionEndpoint: '$(azureSubscription)'
                    azureResourceGroup: '$(resourceGroup)'
                    kubernetesCluster: '$(clusterName)'
                    namespace: '$(namespace)'
                    command: apply
                    useConfigurationFile: true
                    configuration: '$(Build.SourcesDirectory)/manifest/'
                  
                # Configuration kubectl explicite avant de récupérer l'IP
                - task: Kubernetes@1
                  displayName: 'Configure kubectl access'
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscriptionEndpoint: '$(azureSubscription)'
                    azureResourceGroup: '$(resourceGroup)'
                    kubernetesCluster: '$(clusterName)'
                    command: 'login'

                - task: AzureCLI@2
                  displayName: 'Get Ingress IP'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      # Configuration de kubectl pour AKS...
                      az aks get-credentials --resource-group $(resourceGroup) --name $(clusterName) --overwrite-existing
                      
                      # Vérification de la connectivité kubectl...
                      kubectl cluster-info
                      
                      # Liste des services dans ingress-nginx namespace...
                      kubectl get svc -n ingress-nginx || echo "Namespace ingress-nginx non trouvé"
                      
                      # Liste de tous les services LoadBalancer...
                      kubectl get svc --all-namespaces --field-selector spec.type=LoadBalancer
                      
                      # Récupération de l'IP publique de l'Ingress Controller...
                      
                      # Tentative avec différents namespaces possibles
                      for namespace in ingress-nginx nginx-ingress default $(namespace); do
                        echo "Recherche dans le namespace: $namespace"
                        
                        # Différents noms possibles pour le service ingress
                        for service_name in ingress-nginx-controller nginx-ingress-controller ingress-controller nginx-controller; do
                          echo "  Tentative avec le service: $service_name"
                          externalIP=$(kubectl get svc $service_name -n $namespace -o jsonpath="{.status.loadBalancer.ingress[0].ip}" 2>/dev/null || echo "")
                          
                          if [[ -n "$externalIP" && "$externalIP" != "null" ]]; then
                            echo "IP publique trouvée : $externalIP (service: $service_name, namespace: $namespace)"
                            echo "##vso[task.setvariable variable=externalIP;issecret=false]$externalIP"
                            exit 0
                          fi
                        done
                      done
                      
                      # Si aucune IP trouvée, attendre que le LoadBalancer soit prêt
                      echo "Aucune IP trouvée immédiatement, attente de l'assignation du LoadBalancer..."
                      echo "Ceci peut prendre 2-5 minutes (normal pour Azure LoadBalancer)"
                      
                      for i in {1..24}; do
                        echo "Tentative $i/24 ($(($i * 15 / 60)) min $(($i * 15 % 60)) sec écoulées)..."
                        
                        # Vérifier le statut du LoadBalancer
                        kubectl describe svc ingress-nginx-controller -n ingress-nginx 2>/dev/null | grep -A5 "LoadBalancer Ingress" || true
                        
                        # Réessayer avec le service le plus probable
                        externalIP=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath="{.status.loadBalancer.ingress[0].ip}" 2>/dev/null || echo "")
                        
                        if [[ -n "$externalIP" && "$externalIP" != "null" ]]; then
                          echo "IP publique récupérée : $externalIP (après $(($i * 15)) secondes)"
                          echo "##vso[task.setvariable variable=externalIP;issecret=false]$externalIP"
                          exit 0
                        fi
                        
                        # Attente progressive (plus courte au début)
                        if [ $i -lt 8 ]; then
                          echo "Attente 10 secondes..."
                          sleep 10
                        else
                          echo "Attente 20 secondes..."
                          sleep 20
                        fi
                      done
                      
                      # Impossible de récupérer l'IP publique après plusieurs tentatives
                      echo "##[error]Impossible de récupérer l'IP publique après plusieurs tentatives"
                      echo "Services LoadBalancer disponibles:"
                      kubectl get svc --all-namespaces --field-selector spec.type=LoadBalancer
                      exit 1

                - task: AzureCLI@2
                  displayName: 'Diagnostic - Fix ImagePullBackOff'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      # Configuration kubectl
                      az aks get-credentials --resource-group $(resourceGroup) --name $(clusterName) --overwrite-existing
                      
                      # Diagnostic des pods en erreur
                      kubectl describe pods -n $(namespace) | grep -A10 -B5 "ImagePullBackOff\|ErrImagePull" || true
                      
                      # Vérification de l'accès ACR
                      az acr login --name $(acrName)
                      
                      # Images disponibles dans ACR
                      az acr repository list --name $(acrName) --output table
                      az acr repository show-tags --name $(acrName) --repository $(imageName) --output table || echo "Repository $(imageName) introuvable"
                      
                      # Redémarrage des pods en erreur
                      kubectl delete pods -n $(namespace) --field-selector=status.phase=Failed || true
                      kubectl rollout restart deployment -n $(namespace) || true
                      
                      # Attente du redémarrage
                      sleep 30
                      kubectl get pods -n $(namespace) -o wide

                - task: AzureCLI@2
                  displayName: 'Final Status Check'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      # Configuration kubectl
                      az aks get-credentials --resource-group $(resourceGroup) --name $(clusterName) --overwrite-existing
                      
                      # Status des pods dans tous les namespaces
                      kubectl get pods --all-namespaces -o wide
                      
                      # Status des services
                      kubectl get svc --all-namespaces
                      
                      # Status spécifique de l'Ingress Controller
                      kubectl get pods -n ingress-nginx -l app.kubernetes.io/name=ingress-nginx
                      kubectl logs -n ingress-nginx -l app.kubernetes.io/name=ingress-nginx --tail=20 || true
                      
                      # Status de votre application dans le namespace $(namespace)
                      kubectl get pods -n $(namespace) -o wide || echo "Namespace $(namespace) introuvable"
                      kubectl get svc -n $(namespace) || echo "Pas de services dans $(namespace)"
                      
                      # Configuration de l'Ingress
                      kubectl get ingress --all-namespaces || echo "Pas d'Ingress configuré"
                      
                      # Test de connectivité réseau
                      kubectl get endpoints --all-namespaces | grep -v "none" || echo "Pas d'endpoints actifs"
                      
                      if [[ -n "$(externalIP)" && "$externalIP" != "null" ]]; then
                        # IP LoadBalancer disponible
                        echo "IP du LoadBalancer: $(externalIP)"
                        echo "Vous pouvez accéder à votre application via : http://$(externalIP)"
                      else
                        # IP LoadBalancer non récupérée
                        echo "Vérifiez manuellement avec : kubectl get svc -n ingress-nginx"
                      fi

  - stage: AnalyzeCluster
    displayName: 'Analyze Existing AKS Cluster'
    dependsOn: DeployToAKS
    jobs:
      - job: InspectAKS
        displayName: 'Inspect AKS State'
        pool:
          vmImage: ubuntu-latest
        steps:
          # Étape 1: Installation des outils
          - script: |
              set -e
              echo "=== Installation de KubeAudit ==="
              
              # Variables
              KUBEAUDIT_VERSION="0.22.0"
              DOWNLOAD_URL="https://github.com/Shopify/kubeaudit/releases/download/v${KUBEAUDIT_VERSION}/kubeaudit_${KUBEAUDIT_VERSION}_linux_amd64.tar.gz"
              
              # Téléchargement et installation
              curl -L --fail -o kubeaudit.tar.gz "${DOWNLOAD_URL}"
              tar -xzf kubeaudit.tar.gz
              sudo mv kubeaudit /usr/local/bin/
              sudo chmod +x /usr/local/bin/kubeaudit
              
              # Vérification
              kubeaudit version
              
              echo "=== Installation de jq ==="
              sudo apt-get update && sudo apt-get install -y jq
              
              echo "=== Outils installés avec succès ==="
            displayName: 'Install Tools (KubeAudit, jq)'

          # Étape 2: Configuration AKS
          - task: AzureCLI@2
            displayName: 'Get AKS credentials'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "=== Configuration de l'accès AKS ==="
                az aks get-credentials \
                  --name $(clusterName) \
                  --resource-group $(resourceGroup) \
                  --overwrite-existing
                
                echo "=== Test de connexion ==="
                kubectl cluster-info
                kubectl get nodes

          # Étape 3: Inspection des ressources
          - script: |
              echo "=== Listing des ressources Kubernetes ==="
              
              echo "--- Pods ---"
              kubectl get pods -A -o wide
              
              echo "--- Services ---"
              kubectl get svc -A
              
              echo "--- Deployments ---"
              kubectl get deployments -A
              
              echo "--- Ingress ---"
              kubectl get ingress -A
              
              echo "--- ConfigMaps ---"
              kubectl get configmaps -A
              
              echo "--- Secrets ---"
              kubectl get secrets -A
            displayName: 'List Kubernetes resources'

          # Étape 4: Scan de sécurité
          - script: |
              set -e
              
              echo "=== KubeAudit Security Scan ==="
              
              # Créer un répertoire pour les résultats
              mkdir -p scan-results
              
              # Scan complet avec gestion d'erreur
              echo "Lancement du scan de sécurité complet..."
              kubeaudit all --format json > scan-results/kubeaudit-full.json || {
                echo "Erreur détectée par kubeaudit. Création d'un JSON vide pour la suite."
                echo "[]" > scan-results/kubeaudit-full.json
                }
              
              # Scan par catégorie pour plus de détails
              echo "=== Scans spécifiques ==="
              
              echo "Scan des privilèges..."
              kubeaudit privesc --format json > scan-results/privesc.json || true
              
              echo "Scan des capabilities..."
              kubeaudit caps --format json > scan-results/caps.json || true
              
              echo "Scan des ressources..."
              kubeaudit resources --format json > scan-results/resources.json || true
              
              echo "Scan des images..."
              kubeaudit image --format json > scan-results/image.json || true
              
              # Affichage en format table
              echo "=== Résultats en format lisible ==="
              kubeaudit all --format table
              
              # Analyse des résultats
              echo "=== Analyse des résultats ==="
              
              if [ -f scan-results/kubeaudit-full.json ]; then
                if jq empty scan-results/kubeaudit-full.json 2>/dev/null; then
                  TOTAL_ISSUES=$(jq length scan-results/kubeaudit-full.json)
                  echo "Nombre total d'issues: $TOTAL_ISSUES"
              
              echo "=== Copie du fichier principal ==="
              cp scan-results/kubeaudit-full.json $(System.DefaultWorkingDirectory)/kubeaudit-results.json
            displayName: 'Scan de sécurité KubeAudit'
            continueOnError: true

          # Étape 5: Publication des résultats
          - task: PublishBuildArtifacts@1
            displayName: 'Publish KubeAudit Results'
            inputs:
              pathToPublish: 'scan-results'
              artifactName: 'security-scan-results'
              publishLocation: 'Container'
            condition: always()

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Main Results JSON'
            inputs:
              pathToPublish: '$(System.DefaultWorkingDirectory)/kubeaudit-results.json'
              artifactName: 'kubeaudit-main-results'
              publishLocation: 'Container'
            condition: always()
